import { app, BrowserWindow, ipcMain } from 'electron';
import { database as db } from './database';

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 1500,
    width: 1200,
    minWidth: 1200,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.

// Handler for Tasks
ipcMain.handle('ADD_TASK', async (event, task) => {
  db.addTask(task);
});

ipcMain.handle('GET_TASKS', async (event) => {
  return db.getTasks();
});

ipcMain.handle('GET_TASK', async (event, taskId) => {
  return db.getTask(taskId);
} );

ipcMain.handle('DELETE_TASK', async (event, taskId) => {
  db.deleteTask(taskId);
} );

ipcMain.handle('EDIT_TASK', async (event, task) => {
  db.editTask(task);
});

// Handler for Subtasks
ipcMain.handle('ADD_SUBTASK', async (event, subtask) => {
  db.addSubtask(subtask);
});

ipcMain.handle('EDIT_SUBTASK', async (event, task) => {
  db.editSubtask(task);
});

ipcMain.handle('GET_SUBTASKS_FROM_PARENT', async (event, parentTaskId) => {
  return db.getSubtasksFromParent(parentTaskId);
});

// Handler for SmartInput
import {Configuration, OpenAIApi} from 'openai';
import dotenv from 'dotenv';
dotenv.config();

ipcMain.handle('ADD_SMART_RESPONSE', async (event, input) => {
  console.log(input);
  const configuration = new Configuration({
    apiKey: process.env.OPENAI_API_KEY,
  });
  const openai = new OpenAIApi(configuration);

  const JSONformat = "{'name': 'Example Test Title','probability': 70,'subtasks': [{'name': 'Research potential topics','probability': 50},{'task': 'Write conclusion','probability': 50},{'task': 'Proofread and edit','probability': 50}]}";
  const inputTemplate = `Always respond with a json according to this template: ${JSONformat}. For the task:${input}, check the probability that the task can be done in 30 minutes. The probability score is between 0 and 100. If the probability is below 50, give suggestions for subtasks that are also around 30 minutes. If you have no suggestions, return an empty array.`;
  
  try {
    const completion = await openai.createChatCompletion({
      model: "gpt-3.5-turbo",
      messages: [
        {"role": "system", "content": `Structure the output as JSON file with the following format: ${JSONformat}. Only respond with a JSON file, no additional text`},
        {"role": "user", "content": inputTemplate},
      ],
      temperature: 1,
      max_tokens: 150,
    });
    const response = completion.data.choices[0].message.content;
    console.log("Response in index.ts:", response);
    const data = JSON.parse(response);
    return db.addSmartResponse(data);
  } catch (error) {
    if (error.response) {
      console.log(error.response.status);
      console.log(error.response.data);
    } else {
      console.log(error.message);
    }
  }
})